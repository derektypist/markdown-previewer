{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","markdown","updateMarkdown","bind","event","this","setState","target","value","className","id","rows","onChange","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSACIA,EAASC,EAAQ,IAgDNC,E,YA3Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,w7BAGZ,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANL,E,4EAWJC,GACbC,KAAKC,SAAS,CAACL,SAAUG,EAAMG,OAAOC,U,+BAG9B,IACFP,EAAaI,KAAKL,MAAlBC,SAEN,OACE,yBAAKQ,UAAU,uBACjB,6BACA,wBAAIA,UAAU,eAAd,sBACA,iDACA,8BAAUC,GAAG,SAASC,KAAK,KAAKF,UAAU,eAAeD,MAAOP,EAAUW,SAAUP,KAAKH,kBAEzF,6BACA,+CAEA,yBAAKQ,GAAG,UAAUG,wBAA0B,CAACC,OAAOlB,EAAOK,Y,GA7B7Cc,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3085f285.chunk.js","sourcesContent":["import React, { Component } from 'react';\nlet marked = require('marked');\n\n// Set Up Component\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: '# Welcome to my project.  \\n The project...  \\n## Sub Header \\n[British Computer Society](https://www.bcs.org)  \\nHere is some code.  To check status on GitHub use the command `git status`.  You can do other things in GitHub such as reset. \\n  \\nWriting Code in Python  \\n```\\nx = 4\\ny = 2\\nz = x + y\\nprint(z)\\n```  \\nFavourite Celebrities  \\n* Anna Richardson\\n* Kate Garraway\\n* Ruth Langsford\\n* Susanna Reid\\n\\nYou can make text **bold** using two asterisks.  \\nList Items can contain links  \\n* [The National League](https://www.thenationalleague.org.uk)\\n* [Cambridge Python User Group](https://www.meetup.com/CamPUG)\\n\\nThere are blockquotes\\n> Thank you for your kind words\\n\\nImage Links  \\n ![Google Logo](http://www.google.com/images/errors/logo_sm.gif)  \\n## Computing  \\n* Word Processing - include **Clipart Images, Headers and Footers** \\n* Spreadsheets - include **Charts and Formula** \\n* Presentations - include **Slide Layouts**'\n    };\n    \n    this.updateMarkdown = this.updateMarkdown.bind(this);\n  }\n\n  \n  // Update markdown on change of form\n  updateMarkdown(event) {\n    this.setState({markdown: event.target.value});\n  }\n\n  render() {\n    let { markdown } = this.state;\n\n    return (\n      <div className=\"App container-fluid\">\n    <div>\n    <h1 className=\"text-center\">Markdown Previewer</h1>\n    <label>Markdown Input</label>\n    <textarea id=\"editor\" rows=\"15\" className=\"form-control\" value={markdown} onChange={this.updateMarkdown}/>\n    </div>\n    <div>\n    <h1>Markdown Output</h1>\n    {/*Converts string version of html into actual html  */}\n    <div id=\"preview\" dangerouslySetInnerHTML= {{__html:marked(markdown)}}>\n    </div>\n    </div>\n    </div>\n\n\n    );\n\n\n\n\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}